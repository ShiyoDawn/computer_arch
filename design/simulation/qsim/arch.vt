// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/18/2025 20:19:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    alusys
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alusys_vlg_sample_tst(
	An,
	BIMM,
	Bn,
	CLK,
	CLRN,
	Fn,
	IMM,
	Op,
	Wn,
	WREG,
	sampler_tx
);
input [1:0] An;
input  BIMM;
input [1:0] Bn;
input  CLK;
input  CLRN;
input [1:0] Fn;
input [7:0] IMM;
input [1:0] Op;
input [1:0] Wn;
input  WREG;
output sampler_tx;

reg sample;
time current_time;
always @(An or BIMM or Bn or CLK or CLRN or Fn or IMM or Op or Wn or WREG)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module alusys_vlg_check_tst (
	R0,
	R1,
	R2,
	R3,
	sampler_rx
);
input [7:0] R0;
input [7:0] R1;
input [7:0] R2;
input [7:0] R3;
input sampler_rx;

reg [7:0] R0_expected;
reg [7:0] R1_expected;
reg [7:0] R2_expected;
reg [7:0] R3_expected;

reg [7:0] R0_prev;
reg [7:0] R1_prev;
reg [7:0] R2_prev;
reg [7:0] R3_prev;

reg [7:0] R0_expected_prev;
reg [7:0] R1_expected_prev;
reg [7:0] R2_expected_prev;
reg [7:0] R3_expected_prev;

reg [7:0] last_R0_exp;
reg [7:0] last_R1_exp;
reg [7:0] last_R2_exp;
reg [7:0] last_R3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	R0_prev = R0;
	R1_prev = R1;
	R2_prev = R2;
	R3_prev = R3;
end

// update expected /o prevs

always @(trigger)
begin
	R0_expected_prev = R0_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	R3_expected_prev = R3_expected;
end


// expected R0[ 7 ]
initial
begin
	R0_expected[7] = 1'bX;
end 
// expected R0[ 6 ]
initial
begin
	R0_expected[6] = 1'bX;
end 
// expected R0[ 5 ]
initial
begin
	R0_expected[5] = 1'bX;
end 
// expected R0[ 4 ]
initial
begin
	R0_expected[4] = 1'bX;
end 
// expected R0[ 3 ]
initial
begin
	R0_expected[3] = 1'bX;
end 
// expected R0[ 2 ]
initial
begin
	R0_expected[2] = 1'bX;
end 
// expected R0[ 1 ]
initial
begin
	R0_expected[1] = 1'bX;
end 
// expected R0[ 0 ]
initial
begin
	R0_expected[0] = 1'bX;
end 
// expected R1[ 7 ]
initial
begin
	R1_expected[7] = 1'bX;
end 
// expected R1[ 6 ]
initial
begin
	R1_expected[6] = 1'bX;
end 
// expected R1[ 5 ]
initial
begin
	R1_expected[5] = 1'bX;
end 
// expected R1[ 4 ]
initial
begin
	R1_expected[4] = 1'bX;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
end 
// expected R2[ 7 ]
initial
begin
	R2_expected[7] = 1'bX;
end 
// expected R2[ 6 ]
initial
begin
	R2_expected[6] = 1'bX;
end 
// expected R2[ 5 ]
initial
begin
	R2_expected[5] = 1'bX;
end 
// expected R2[ 4 ]
initial
begin
	R2_expected[4] = 1'bX;
end 
// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
end 
// expected R3[ 7 ]
initial
begin
	R3_expected[7] = 1'bX;
end 
// expected R3[ 6 ]
initial
begin
	R3_expected[6] = 1'bX;
end 
// expected R3[ 5 ]
initial
begin
	R3_expected[5] = 1'bX;
end 
// expected R3[ 4 ]
initial
begin
	R3_expected[4] = 1'bX;
end 
// expected R3[ 3 ]
initial
begin
	R3_expected[3] = 1'bX;
end 
// expected R3[ 2 ]
initial
begin
	R3_expected[2] = 1'bX;
end 
// expected R3[ 1 ]
initial
begin
	R3_expected[1] = 1'bX;
end 
// expected R3[ 0 ]
initial
begin
	R3_expected[0] = 1'bX;
end 
// generate trigger
always @(R0_expected or R0 or R1_expected or R1 or R2_expected or R2 or R3_expected or R3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected R0 = %b | expected R1 = %b | expected R2 = %b | expected R3 = %b | ",R0_expected_prev,R1_expected_prev,R2_expected_prev,R3_expected_prev);
	$display("| real R0 = %b | real R1 = %b | real R2 = %b | real R3 = %b | ",R0_prev,R1_prev,R2_prev,R3_prev);
`endif
	if (
		( R0_expected_prev[0] !== 1'bx ) && ( R0_prev[0] !== R0_expected_prev[0] )
		&& ((R0_expected_prev[0] !== last_R0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R0_exp[0] = R0_expected_prev[0];
	end
	if (
		( R0_expected_prev[1] !== 1'bx ) && ( R0_prev[1] !== R0_expected_prev[1] )
		&& ((R0_expected_prev[1] !== last_R0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R0_exp[1] = R0_expected_prev[1];
	end
	if (
		( R0_expected_prev[2] !== 1'bx ) && ( R0_prev[2] !== R0_expected_prev[2] )
		&& ((R0_expected_prev[2] !== last_R0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R0_exp[2] = R0_expected_prev[2];
	end
	if (
		( R0_expected_prev[3] !== 1'bx ) && ( R0_prev[3] !== R0_expected_prev[3] )
		&& ((R0_expected_prev[3] !== last_R0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R0_exp[3] = R0_expected_prev[3];
	end
	if (
		( R0_expected_prev[4] !== 1'bx ) && ( R0_prev[4] !== R0_expected_prev[4] )
		&& ((R0_expected_prev[4] !== last_R0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R0_exp[4] = R0_expected_prev[4];
	end
	if (
		( R0_expected_prev[5] !== 1'bx ) && ( R0_prev[5] !== R0_expected_prev[5] )
		&& ((R0_expected_prev[5] !== last_R0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R0_exp[5] = R0_expected_prev[5];
	end
	if (
		( R0_expected_prev[6] !== 1'bx ) && ( R0_prev[6] !== R0_expected_prev[6] )
		&& ((R0_expected_prev[6] !== last_R0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R0_exp[6] = R0_expected_prev[6];
	end
	if (
		( R0_expected_prev[7] !== 1'bx ) && ( R0_prev[7] !== R0_expected_prev[7] )
		&& ((R0_expected_prev[7] !== last_R0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R0_exp[7] = R0_expected_prev[7];
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R1_expected_prev[4] !== 1'bx ) && ( R1_prev[4] !== R1_expected_prev[4] )
		&& ((R1_expected_prev[4] !== last_R1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[4] = R1_expected_prev[4];
	end
	if (
		( R1_expected_prev[5] !== 1'bx ) && ( R1_prev[5] !== R1_expected_prev[5] )
		&& ((R1_expected_prev[5] !== last_R1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[5] = R1_expected_prev[5];
	end
	if (
		( R1_expected_prev[6] !== 1'bx ) && ( R1_prev[6] !== R1_expected_prev[6] )
		&& ((R1_expected_prev[6] !== last_R1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[6] = R1_expected_prev[6];
	end
	if (
		( R1_expected_prev[7] !== 1'bx ) && ( R1_prev[7] !== R1_expected_prev[7] )
		&& ((R1_expected_prev[7] !== last_R1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[7] = R1_expected_prev[7];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end
	if (
		( R2_expected_prev[4] !== 1'bx ) && ( R2_prev[4] !== R2_expected_prev[4] )
		&& ((R2_expected_prev[4] !== last_R2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[4] = R2_expected_prev[4];
	end
	if (
		( R2_expected_prev[5] !== 1'bx ) && ( R2_prev[5] !== R2_expected_prev[5] )
		&& ((R2_expected_prev[5] !== last_R2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[5] = R2_expected_prev[5];
	end
	if (
		( R2_expected_prev[6] !== 1'bx ) && ( R2_prev[6] !== R2_expected_prev[6] )
		&& ((R2_expected_prev[6] !== last_R2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[6] = R2_expected_prev[6];
	end
	if (
		( R2_expected_prev[7] !== 1'bx ) && ( R2_prev[7] !== R2_expected_prev[7] )
		&& ((R2_expected_prev[7] !== last_R2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[7] = R2_expected_prev[7];
	end
	if (
		( R3_expected_prev[0] !== 1'bx ) && ( R3_prev[0] !== R3_expected_prev[0] )
		&& ((R3_expected_prev[0] !== last_R3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R3_exp[0] = R3_expected_prev[0];
	end
	if (
		( R3_expected_prev[1] !== 1'bx ) && ( R3_prev[1] !== R3_expected_prev[1] )
		&& ((R3_expected_prev[1] !== last_R3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R3_exp[1] = R3_expected_prev[1];
	end
	if (
		( R3_expected_prev[2] !== 1'bx ) && ( R3_prev[2] !== R3_expected_prev[2] )
		&& ((R3_expected_prev[2] !== last_R3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R3_exp[2] = R3_expected_prev[2];
	end
	if (
		( R3_expected_prev[3] !== 1'bx ) && ( R3_prev[3] !== R3_expected_prev[3] )
		&& ((R3_expected_prev[3] !== last_R3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R3_exp[3] = R3_expected_prev[3];
	end
	if (
		( R3_expected_prev[4] !== 1'bx ) && ( R3_prev[4] !== R3_expected_prev[4] )
		&& ((R3_expected_prev[4] !== last_R3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R3_exp[4] = R3_expected_prev[4];
	end
	if (
		( R3_expected_prev[5] !== 1'bx ) && ( R3_prev[5] !== R3_expected_prev[5] )
		&& ((R3_expected_prev[5] !== last_R3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R3_exp[5] = R3_expected_prev[5];
	end
	if (
		( R3_expected_prev[6] !== 1'bx ) && ( R3_prev[6] !== R3_expected_prev[6] )
		&& ((R3_expected_prev[6] !== last_R3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R3_exp[6] = R3_expected_prev[6];
	end
	if (
		( R3_expected_prev[7] !== 1'bx ) && ( R3_prev[7] !== R3_expected_prev[7] )
		&& ((R3_expected_prev[7] !== last_R3_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R3_exp[7] = R3_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module alusys_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] An;
reg BIMM;
reg [1:0] Bn;
reg CLK;
reg CLRN;
reg [1:0] Fn;
reg [7:0] IMM;
reg [1:0] Op;
reg [1:0] Wn;
reg WREG;
// wires                                               
wire [7:0] R0;
wire [7:0] R1;
wire [7:0] R2;
wire [7:0] R3;

wire sampler;                             

// assign statements (if any)                          
alusys i1 (
// port map - connection between master ports and signals/registers   
	.An(An),
	.BIMM(BIMM),
	.Bn(Bn),
	.CLK(CLK),
	.CLRN(CLRN),
	.Fn(Fn),
	.IMM(IMM),
	.Op(Op),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.Wn(Wn),
	.WREG(WREG)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// CLRN
initial
begin
	CLRN = 1'b0;
	CLRN = #10000 1'b1;
end 
// An[ 1 ]
initial
begin
	An[1] = 1'b1;
	An[1] = #30000 1'b0;
	An[1] = #20000 1'b1;
	An[1] = #10000 1'b0;
	An[1] = #10000 1'b1;
	An[1] = #10000 1'b0;
	An[1] = #20000 1'b1;
	An[1] = #10000 1'b0;
	An[1] = #10000 1'b1;
	An[1] = #10000 1'b0;
	An[1] = #30000 1'b1;
	An[1] = #20000 1'b0;
	An[1] = #10000 1'b1;
	An[1] = #30000 1'b0;
	An[1] = #10000 1'b1;
	An[1] = #10000 1'b0;
	An[1] = #10000 1'b1;
	An[1] = #20000 1'b0;
	An[1] = #30000 1'b1;
	An[1] = #30000 1'b0;
	An[1] = #40000 1'b1;
	An[1] = #40000 1'b0;
	An[1] = #20000 1'b1;
	An[1] = #10000 1'b0;
	An[1] = #20000 1'b1;
	An[1] = #10000 1'b0;
	An[1] = #10000 1'b1;
	An[1] = #30000 1'b0;
	An[1] = #30000 1'b1;
	An[1] = #10000 1'b0;
	An[1] = #10000 1'b1;
	An[1] = #30000 1'b0;
	An[1] = #10000 1'b1;
	An[1] = #10000 1'b0;
	An[1] = #10000 1'b1;
	An[1] = #10000 1'b0;
	An[1] = #30000 1'b1;
	An[1] = #20000 1'b0;
	An[1] = #30000 1'b1;
	An[1] = #10000 1'b0;
	An[1] = #10000 1'b1;
	An[1] = #50000 1'b0;
	An[1] = #10000 1'b1;
	An[1] = #30000 1'b0;
	An[1] = #10000 1'b1;
	An[1] = #20000 1'b0;
	An[1] = #10000 1'b1;
	An[1] = #60000 1'b0;
	An[1] = #40000 1'b1;
	An[1] = #10000 1'b0;
end 
// An[ 0 ]
initial
begin
	An[0] = 1'b0;
	An[0] = #20000 1'b1;
	An[0] = #20000 1'b0;
	An[0] = #30000 1'b1;
	An[0] = #10000 1'b0;
	An[0] = #10000 1'b1;
	An[0] = #20000 1'b0;
	An[0] = #10000 1'b1;
	An[0] = #10000 1'b0;
	An[0] = #10000 1'b1;
	An[0] = #20000 1'b0;
	An[0] = #20000 1'b1;
	An[0] = #30000 1'b0;
	An[0] = #20000 1'b1;
	An[0] = #10000 1'b0;
	An[0] = #20000 1'b1;
	An[0] = #50000 1'b0;
	An[0] = #20000 1'b1;
	An[0] = #10000 1'b0;
	An[0] = #20000 1'b1;
	An[0] = #20000 1'b0;
	An[0] = #60000 1'b1;
	An[0] = #20000 1'b0;
	An[0] = #10000 1'b1;
	An[0] = #10000 1'b0;
	An[0] = #20000 1'b1;
	An[0] = #30000 1'b0;
	An[0] = #20000 1'b1;
	An[0] = #10000 1'b0;
	An[0] = #70000 1'b1;
	An[0] = #30000 1'b0;
	An[0] = #10000 1'b1;
	An[0] = #40000 1'b0;
	An[0] = #50000 1'b1;
	An[0] = #20000 1'b0;
	An[0] = #40000 1'b1;
	An[0] = #10000 1'b0;
	An[0] = #10000 1'b1;
	An[0] = #10000 1'b0;
	An[0] = #10000 1'b1;
	An[0] = #10000 1'b0;
	An[0] = #30000 1'b1;
	An[0] = #30000 1'b0;
	An[0] = #60000 1'b1;
end 
// Bn[ 1 ]
initial
begin
	Bn[1] = 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #10000 1'b0;
	Bn[1] = #20000 1'b1;
	Bn[1] = #10000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #30000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #10000 1'b0;
	Bn[1] = #30000 1'b1;
	Bn[1] = #30000 1'b0;
	Bn[1] = #40000 1'b1;
	Bn[1] = #40000 1'b0;
	Bn[1] = #60000 1'b1;
	Bn[1] = #10000 1'b0;
	Bn[1] = #20000 1'b1;
	Bn[1] = #20000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #20000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #10000 1'b0;
	Bn[1] = #20000 1'b1;
	Bn[1] = #40000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #20000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #10000 1'b0;
	Bn[1] = #20000 1'b1;
	Bn[1] = #10000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #10000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #30000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #10000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #10000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #10000 1'b0;
	Bn[1] = #30000 1'b1;
	Bn[1] = #20000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #20000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #10000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #20000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #10000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #10000 1'b0;
	Bn[1] = #40000 1'b1;
	Bn[1] = #10000 1'b0;
	Bn[1] = #20000 1'b1;
	Bn[1] = #10000 1'b0;
	Bn[1] = #10000 1'b1;
	Bn[1] = #20000 1'b0;
	Bn[1] = #20000 1'b1;
	Bn[1] = #10000 1'b0;
end 
// Bn[ 0 ]
initial
begin
	Bn[0] = 1'b1;
	Bn[0] = #40000 1'b0;
	Bn[0] = #10000 1'b1;
	Bn[0] = #10000 1'b0;
	Bn[0] = #10000 1'b1;
	Bn[0] = #20000 1'b0;
	Bn[0] = #50000 1'b1;
	Bn[0] = #20000 1'b0;
	Bn[0] = #10000 1'b1;
	Bn[0] = #20000 1'b0;
	Bn[0] = #30000 1'b1;
	Bn[0] = #10000 1'b0;
	Bn[0] = #40000 1'b1;
	Bn[0] = #10000 1'b0;
	Bn[0] = #40000 1'b1;
	Bn[0] = #10000 1'b0;
	Bn[0] = #20000 1'b1;
	Bn[0] = #30000 1'b0;
	Bn[0] = #10000 1'b1;
	Bn[0] = #10000 1'b0;
	Bn[0] = #10000 1'b1;
	Bn[0] = #20000 1'b0;
	Bn[0] = #40000 1'b1;
	Bn[0] = #30000 1'b0;
	Bn[0] = #10000 1'b1;
	Bn[0] = #10000 1'b0;
	Bn[0] = #20000 1'b1;
	Bn[0] = #40000 1'b0;
	Bn[0] = #20000 1'b1;
	Bn[0] = #40000 1'b0;
	Bn[0] = #10000 1'b1;
	Bn[0] = #10000 1'b0;
	Bn[0] = #30000 1'b1;
	Bn[0] = #20000 1'b0;
	Bn[0] = #10000 1'b1;
	Bn[0] = #30000 1'b0;
	Bn[0] = #70000 1'b1;
	Bn[0] = #10000 1'b0;
	Bn[0] = #10000 1'b1;
	Bn[0] = #10000 1'b0;
	Bn[0] = #30000 1'b1;
	Bn[0] = #10000 1'b0;
	Bn[0] = #10000 1'b1;
	Bn[0] = #50000 1'b0;
	Bn[0] = #40000 1'b1;
end 

// BIMM
initial
begin
	BIMM = 1'b1;
end 
// IMM[ 7 ]
initial
begin
	IMM[7] = 1'b1;
	IMM[7] = #10000 1'b0;
	IMM[7] = #10000 1'b1;
	IMM[7] = #20000 1'b0;
	IMM[7] = #10000 1'b1;
	IMM[7] = #20000 1'b0;
	IMM[7] = #20000 1'b1;
	IMM[7] = #10000 1'b0;
	IMM[7] = #40000 1'b1;
	IMM[7] = #20000 1'b0;
	IMM[7] = #10000 1'b1;
	IMM[7] = #20000 1'b0;
	IMM[7] = #10000 1'b1;
	IMM[7] = #20000 1'b0;
	IMM[7] = #30000 1'b1;
	IMM[7] = #40000 1'b0;
	IMM[7] = #10000 1'b1;
	IMM[7] = #30000 1'b0;
	IMM[7] = #20000 1'b1;
	IMM[7] = #70000 1'b0;
	IMM[7] = #40000 1'b1;
	IMM[7] = #10000 1'b0;
	IMM[7] = #10000 1'b1;
	IMM[7] = #30000 1'b0;
	IMM[7] = #10000 1'b1;
	IMM[7] = #20000 1'b0;
	IMM[7] = #50000 1'b1;
	IMM[7] = #10000 1'b0;
	IMM[7] = #10000 1'b1;
	IMM[7] = #50000 1'b0;
	IMM[7] = #40000 1'b1;
	IMM[7] = #30000 1'b0;
	IMM[7] = #40000 1'b1;
	IMM[7] = #10000 1'b0;
	IMM[7] = #60000 1'b1;
	IMM[7] = #20000 1'b0;
	IMM[7] = #10000 1'b1;
	IMM[7] = #10000 1'b0;
	IMM[7] = #20000 1'b1;
	IMM[7] = #10000 1'b0;
	IMM[7] = #40000 1'b1;
	IMM[7] = #10000 1'b0;
end 
// IMM[ 6 ]
initial
begin
	IMM[6] = 1'b0;
	IMM[6] = #10000 1'b1;
	IMM[6] = #10000 1'b0;
	IMM[6] = #10000 1'b1;
	IMM[6] = #10000 1'b0;
	IMM[6] = #10000 1'b1;
	IMM[6] = #10000 1'b0;
	IMM[6] = #20000 1'b1;
	IMM[6] = #10000 1'b0;
	IMM[6] = #10000 1'b1;
	IMM[6] = #30000 1'b0;
	IMM[6] = #10000 1'b1;
	IMM[6] = #40000 1'b0;
	IMM[6] = #10000 1'b1;
	IMM[6] = #10000 1'b0;
	IMM[6] = #10000 1'b1;
	IMM[6] = #10000 1'b0;
	IMM[6] = #10000 1'b1;
	IMM[6] = #50000 1'b0;
	IMM[6] = #10000 1'b1;
	IMM[6] = #10000 1'b0;
	IMM[6] = #20000 1'b1;
	IMM[6] = #30000 1'b0;
	IMM[6] = #50000 1'b1;
	IMM[6] = #20000 1'b0;
	IMM[6] = #10000 1'b1;
	IMM[6] = #10000 1'b0;
	IMM[6] = #10000 1'b1;
	IMM[6] = #20000 1'b0;
	IMM[6] = #20000 1'b1;
	IMM[6] = #20000 1'b0;
	IMM[6] = #20000 1'b1;
	IMM[6] = #10000 1'b0;
	IMM[6] = #10000 1'b1;
	IMM[6] = #20000 1'b0;
	IMM[6] = #10000 1'b1;
	IMM[6] = #20000 1'b0;
	IMM[6] = #20000 1'b1;
	IMM[6] = #20000 1'b0;
	IMM[6] = #40000 1'b1;
	IMM[6] = #30000 1'b0;
	IMM[6] = #30000 1'b1;
	IMM[6] = #10000 1'b0;
	IMM[6] = #10000 1'b1;
	IMM[6] = #10000 1'b0;
	IMM[6] = #10000 1'b1;
	IMM[6] = #20000 1'b0;
	IMM[6] = #20000 1'b1;
	IMM[6] = #10000 1'b0;
	IMM[6] = #20000 1'b1;
	IMM[6] = #20000 1'b0;
	IMM[6] = #20000 1'b1;
	IMM[6] = #10000 1'b0;
	IMM[6] = #50000 1'b1;
	IMM[6] = #10000 1'b0;
	IMM[6] = #20000 1'b1;
	IMM[6] = #10000 1'b0;
end 
// IMM[ 5 ]
initial
begin
	IMM[5] = 1'b1;
	IMM[5] = #10000 1'b0;
	IMM[5] = #30000 1'b1;
	IMM[5] = #10000 1'b0;
	IMM[5] = #50000 1'b1;
	IMM[5] = #20000 1'b0;
	IMM[5] = #10000 1'b1;
	IMM[5] = #10000 1'b0;
	IMM[5] = #30000 1'b1;
	IMM[5] = #10000 1'b0;
	IMM[5] = #10000 1'b1;
	IMM[5] = #70000 1'b0;
	IMM[5] = #10000 1'b1;
	IMM[5] = #20000 1'b0;
	IMM[5] = #10000 1'b1;
	IMM[5] = #10000 1'b0;
	IMM[5] = #20000 1'b1;
	IMM[5] = #60000 1'b0;
	IMM[5] = #50000 1'b1;
	IMM[5] = #10000 1'b0;
	IMM[5] = #10000 1'b1;
	IMM[5] = #40000 1'b0;
	IMM[5] = #10000 1'b1;
	IMM[5] = #60000 1'b0;
	IMM[5] = #30000 1'b1;
	IMM[5] = #10000 1'b0;
	IMM[5] = #20000 1'b1;
	IMM[5] = #40000 1'b0;
	IMM[5] = #20000 1'b1;
	IMM[5] = #50000 1'b0;
	IMM[5] = #10000 1'b1;
	IMM[5] = #40000 1'b0;
	IMM[5] = #10000 1'b1;
	IMM[5] = #10000 1'b0;
	IMM[5] = #40000 1'b1;
	IMM[5] = #20000 1'b0;
	IMM[5] = #10000 1'b1;
	IMM[5] = #30000 1'b0;
	IMM[5] = #30000 1'b1;
	IMM[5] = #10000 1'b0;
	IMM[5] = #20000 1'b1;
	IMM[5] = #10000 1'b0;
end 
// IMM[ 4 ]
initial
begin
	IMM[4] = 1'b1;
	IMM[4] = #20000 1'b0;
	IMM[4] = #20000 1'b1;
	IMM[4] = #10000 1'b0;
	IMM[4] = #20000 1'b1;
	IMM[4] = #10000 1'b0;
	IMM[4] = #30000 1'b1;
	IMM[4] = #10000 1'b0;
	IMM[4] = #10000 1'b1;
	IMM[4] = #50000 1'b0;
	IMM[4] = #20000 1'b1;
	IMM[4] = #10000 1'b0;
	IMM[4] = #50000 1'b1;
	IMM[4] = #10000 1'b0;
	IMM[4] = #10000 1'b1;
	IMM[4] = #10000 1'b0;
	IMM[4] = #10000 1'b1;
	IMM[4] = #20000 1'b0;
	IMM[4] = #20000 1'b1;
	IMM[4] = #20000 1'b0;
	IMM[4] = #40000 1'b1;
	IMM[4] = #40000 1'b0;
	IMM[4] = #50000 1'b1;
	IMM[4] = #40000 1'b0;
	IMM[4] = #10000 1'b1;
	IMM[4] = #60000 1'b0;
	IMM[4] = #40000 1'b1;
	IMM[4] = #10000 1'b0;
	IMM[4] = #50000 1'b1;
	IMM[4] = #10000 1'b0;
	IMM[4] = #10000 1'b1;
	IMM[4] = #20000 1'b0;
	IMM[4] = #20000 1'b1;
	IMM[4] = #20000 1'b0;
	IMM[4] = #20000 1'b1;
	IMM[4] = #50000 1'b0;
	IMM[4] = #10000 1'b1;
	IMM[4] = #30000 1'b0;
	IMM[4] = #20000 1'b1;
	IMM[4] = #30000 1'b0;
	IMM[4] = #10000 1'b1;
	IMM[4] = #10000 1'b0;
	IMM[4] = #10000 1'b1;
	IMM[4] = #20000 1'b0;
end 
// IMM[ 3 ]
initial
begin
	IMM[3] = 1'b1;
	IMM[3] = #20000 1'b0;
	IMM[3] = #30000 1'b1;
	IMM[3] = #10000 1'b0;
	IMM[3] = #20000 1'b1;
	IMM[3] = #10000 1'b0;
	IMM[3] = #70000 1'b1;
	IMM[3] = #10000 1'b0;
	IMM[3] = #10000 1'b1;
	IMM[3] = #60000 1'b0;
	IMM[3] = #30000 1'b1;
	IMM[3] = #40000 1'b0;
	IMM[3] = #10000 1'b1;
	IMM[3] = #30000 1'b0;
	IMM[3] = #10000 1'b1;
	IMM[3] = #40000 1'b0;
	IMM[3] = #40000 1'b1;
	IMM[3] = #40000 1'b0;
	IMM[3] = #10000 1'b1;
	IMM[3] = #10000 1'b0;
	IMM[3] = #20000 1'b1;
	IMM[3] = #10000 1'b0;
	IMM[3] = #10000 1'b1;
	IMM[3] = #10000 1'b0;
	IMM[3] = #10000 1'b1;
	IMM[3] = #40000 1'b0;
	IMM[3] = #20000 1'b1;
	IMM[3] = #20000 1'b0;
	IMM[3] = #20000 1'b1;
	IMM[3] = #10000 1'b0;
	IMM[3] = #20000 1'b1;
	IMM[3] = #10000 1'b0;
	IMM[3] = #40000 1'b1;
	IMM[3] = #20000 1'b0;
	IMM[3] = #30000 1'b1;
	IMM[3] = #20000 1'b0;
	IMM[3] = #10000 1'b1;
	IMM[3] = #10000 1'b0;
	IMM[3] = #10000 1'b1;
	IMM[3] = #20000 1'b0;
	IMM[3] = #10000 1'b1;
	IMM[3] = #20000 1'b0;
	IMM[3] = #20000 1'b1;
	IMM[3] = #50000 1'b0;
end 
// IMM[ 2 ]
initial
begin
	IMM[2] = 1'b1;
	IMM[2] = #10000 1'b0;
	IMM[2] = #20000 1'b1;
	IMM[2] = #10000 1'b0;
	IMM[2] = #10000 1'b1;
	IMM[2] = #10000 1'b0;
	IMM[2] = #10000 1'b1;
	IMM[2] = #10000 1'b0;
	IMM[2] = #10000 1'b1;
	IMM[2] = #30000 1'b0;
	IMM[2] = #20000 1'b1;
	IMM[2] = #50000 1'b0;
	IMM[2] = #30000 1'b1;
	IMM[2] = #10000 1'b0;
	IMM[2] = #20000 1'b1;
	IMM[2] = #30000 1'b0;
	IMM[2] = #20000 1'b1;
	IMM[2] = #20000 1'b0;
	IMM[2] = #70000 1'b1;
	IMM[2] = #50000 1'b0;
	IMM[2] = #10000 1'b1;
	IMM[2] = #20000 1'b0;
	IMM[2] = #10000 1'b1;
	IMM[2] = #10000 1'b0;
	IMM[2] = #40000 1'b1;
	IMM[2] = #20000 1'b0;
	IMM[2] = #90000 1'b1;
	IMM[2] = #30000 1'b0;
	IMM[2] = #10000 1'b1;
	IMM[2] = #20000 1'b0;
	IMM[2] = #40000 1'b1;
	IMM[2] = #10000 1'b0;
	IMM[2] = #10000 1'b1;
	IMM[2] = #10000 1'b0;
	IMM[2] = #30000 1'b1;
	IMM[2] = #10000 1'b0;
	IMM[2] = #10000 1'b1;
	IMM[2] = #10000 1'b0;
	IMM[2] = #50000 1'b1;
	IMM[2] = #10000 1'b0;
	IMM[2] = #60000 1'b1;
	IMM[2] = #10000 1'b0;
	IMM[2] = #20000 1'b1;
	IMM[2] = #10000 1'b0;
end 
// IMM[ 1 ]
initial
begin
	IMM[1] = 1'b0;
	IMM[1] = #20000 1'b1;
	IMM[1] = #20000 1'b0;
	IMM[1] = #20000 1'b1;
	IMM[1] = #50000 1'b0;
	IMM[1] = #10000 1'b1;
	IMM[1] = #10000 1'b0;
	IMM[1] = #10000 1'b1;
	IMM[1] = #10000 1'b0;
	IMM[1] = #10000 1'b1;
	IMM[1] = #50000 1'b0;
	IMM[1] = #40000 1'b1;
	IMM[1] = #10000 1'b0;
	IMM[1] = #20000 1'b1;
	IMM[1] = #30000 1'b0;
	IMM[1] = #10000 1'b1;
	IMM[1] = #20000 1'b0;
	IMM[1] = #20000 1'b1;
	IMM[1] = #10000 1'b0;
	IMM[1] = #10000 1'b1;
	IMM[1] = #10000 1'b0;
	IMM[1] = #60000 1'b1;
	IMM[1] = #20000 1'b0;
	IMM[1] = #40000 1'b1;
	IMM[1] = #10000 1'b0;
	IMM[1] = #20000 1'b1;
	IMM[1] = #10000 1'b0;
	IMM[1] = #30000 1'b1;
	IMM[1] = #40000 1'b0;
	IMM[1] = #10000 1'b1;
	IMM[1] = #10000 1'b0;
	IMM[1] = #20000 1'b1;
	IMM[1] = #30000 1'b0;
	IMM[1] = #20000 1'b1;
	IMM[1] = #10000 1'b0;
	IMM[1] = #30000 1'b1;
	IMM[1] = #10000 1'b0;
	IMM[1] = #10000 1'b1;
	IMM[1] = #30000 1'b0;
	IMM[1] = #30000 1'b1;
	IMM[1] = #10000 1'b0;
	IMM[1] = #50000 1'b1;
	IMM[1] = #10000 1'b0;
	IMM[1] = #10000 1'b1;
	IMM[1] = #10000 1'b0;
	IMM[1] = #20000 1'b1;
	IMM[1] = #10000 1'b0;
	IMM[1] = #30000 1'b1;
	IMM[1] = #10000 1'b0;
end 
// IMM[ 0 ]
initial
begin
	IMM[0] = 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #10000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #30000 1'b0;
	IMM[0] = #40000 1'b1;
	IMM[0] = #10000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #20000 1'b0;
	IMM[0] = #20000 1'b1;
	IMM[0] = #20000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #10000 1'b0;
	IMM[0] = #20000 1'b1;
	IMM[0] = #10000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #10000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #20000 1'b0;
	IMM[0] = #30000 1'b1;
	IMM[0] = #10000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #10000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #10000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #50000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #30000 1'b0;
	IMM[0] = #20000 1'b1;
	IMM[0] = #20000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #20000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #10000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #10000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #20000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #20000 1'b0;
	IMM[0] = #40000 1'b1;
	IMM[0] = #20000 1'b0;
	IMM[0] = #20000 1'b1;
	IMM[0] = #20000 1'b0;
	IMM[0] = #20000 1'b1;
	IMM[0] = #40000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #10000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #10000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #30000 1'b0;
	IMM[0] = #10000 1'b1;
	IMM[0] = #10000 1'b0;
	IMM[0] = #30000 1'b1;
	IMM[0] = #20000 1'b0;
	IMM[0] = #30000 1'b1;
	IMM[0] = #10000 1'b0;
end 
// Op[ 1 ]
initial
begin
	Op[1] = 1'b1;
	Op[1] = #10000 1'b0;
	Op[1] = #30000 1'b1;
	Op[1] = #10000 1'b0;
	Op[1] = #10000 1'b1;
	Op[1] = #30000 1'b0;
	Op[1] = #10000 1'b1;
	Op[1] = #10000 1'b0;
	Op[1] = #30000 1'b1;
	Op[1] = #10000 1'b0;
	Op[1] = #10000 1'b1;
	Op[1] = #10000 1'b0;
	Op[1] = #30000 1'b1;
	Op[1] = #20000 1'b0;
	Op[1] = #30000 1'b1;
	Op[1] = #30000 1'b0;
	Op[1] = #10000 1'b1;
	Op[1] = #30000 1'b0;
	Op[1] = #10000 1'b1;
	Op[1] = #20000 1'b0;
	Op[1] = #10000 1'b1;
	Op[1] = #20000 1'b0;
	Op[1] = #10000 1'b1;
	Op[1] = #30000 1'b0;
	Op[1] = #10000 1'b1;
	Op[1] = #10000 1'b0;
	Op[1] = #20000 1'b1;
	Op[1] = #10000 1'b0;
	Op[1] = #10000 1'b1;
	Op[1] = #30000 1'b0;
	Op[1] = #30000 1'b1;
	Op[1] = #10000 1'b0;
	Op[1] = #10000 1'b1;
	Op[1] = #10000 1'b0;
	Op[1] = #50000 1'b1;
	Op[1] = #30000 1'b0;
	Op[1] = #10000 1'b1;
	Op[1] = #30000 1'b0;
	Op[1] = #10000 1'b1;
	Op[1] = #10000 1'b0;
	Op[1] = #30000 1'b1;
	Op[1] = #30000 1'b0;
	Op[1] = #10000 1'b1;
	Op[1] = #60000 1'b0;
	Op[1] = #10000 1'b1;
	Op[1] = #20000 1'b0;
	Op[1] = #20000 1'b1;
	Op[1] = #10000 1'b0;
	Op[1] = #70000 1'b1;
	Op[1] = #20000 1'b0;
end 
// Op[ 0 ]
initial
begin
	Op[0] = 1'b1;
	Op[0] = #20000 1'b0;
	Op[0] = #20000 1'b1;
	Op[0] = #30000 1'b0;
	Op[0] = #10000 1'b1;
	Op[0] = #20000 1'b0;
	Op[0] = #10000 1'b1;
	Op[0] = #70000 1'b0;
	Op[0] = #20000 1'b1;
	Op[0] = #30000 1'b0;
	Op[0] = #30000 1'b1;
	Op[0] = #10000 1'b0;
	Op[0] = #20000 1'b1;
	Op[0] = #50000 1'b0;
	Op[0] = #30000 1'b1;
	Op[0] = #10000 1'b0;
	Op[0] = #20000 1'b1;
	Op[0] = #20000 1'b0;
	Op[0] = #10000 1'b1;
	Op[0] = #10000 1'b0;
	Op[0] = #10000 1'b1;
	Op[0] = #10000 1'b0;
	Op[0] = #30000 1'b1;
	Op[0] = #20000 1'b0;
	Op[0] = #20000 1'b1;
	Op[0] = #20000 1'b0;
	Op[0] = #10000 1'b1;
	Op[0] = #10000 1'b0;
	Op[0] = #10000 1'b1;
	Op[0] = #40000 1'b0;
	Op[0] = #90000 1'b1;
	Op[0] = #20000 1'b0;
	Op[0] = #10000 1'b1;
	Op[0] = #10000 1'b0;
	Op[0] = #20000 1'b1;
	Op[0] = #20000 1'b0;
	Op[0] = #10000 1'b1;
	Op[0] = #10000 1'b0;
	Op[0] = #10000 1'b1;
	Op[0] = #10000 1'b0;
	Op[0] = #50000 1'b1;
	Op[0] = #20000 1'b0;
	Op[0] = #20000 1'b1;
	Op[0] = #10000 1'b0;
	Op[0] = #10000 1'b1;
	Op[0] = #20000 1'b0;
	Op[0] = #20000 1'b1;
	Op[0] = #10000 1'b0;
end 
// Fn[ 1 ]
initial
begin
	Fn[1] = 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #30000 1'b1;
	Fn[1] = #40000 1'b0;
	Fn[1] = #10000 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #60000 1'b1;
	Fn[1] = #20000 1'b0;
	Fn[1] = #10000 1'b1;
	Fn[1] = #20000 1'b0;
	Fn[1] = #30000 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #10000 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #10000 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #10000 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #10000 1'b1;
	Fn[1] = #30000 1'b0;
	Fn[1] = #10000 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #10000 1'b1;
	Fn[1] = #20000 1'b0;
	Fn[1] = #30000 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #30000 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #40000 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #20000 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #40000 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #10000 1'b1;
	Fn[1] = #20000 1'b0;
	Fn[1] = #20000 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #30000 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #10000 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #30000 1'b1;
	Fn[1] = #40000 1'b0;
	Fn[1] = #10000 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #30000 1'b1;
	Fn[1] = #10000 1'b0;
	Fn[1] = #10000 1'b1;
	Fn[1] = #30000 1'b0;
	Fn[1] = #20000 1'b1;
	Fn[1] = #20000 1'b0;
	Fn[1] = #20000 1'b1;
	Fn[1] = #20000 1'b0;
	Fn[1] = #10000 1'b1;
end 
// Fn[ 0 ]
initial
begin
	Fn[0] = 1'b1;
	Fn[0] = #10000 1'b0;
	Fn[0] = #10000 1'b1;
	Fn[0] = #10000 1'b0;
	Fn[0] = #10000 1'b1;
	Fn[0] = #10000 1'b0;
	Fn[0] = #10000 1'b1;
	Fn[0] = #20000 1'b0;
	Fn[0] = #30000 1'b1;
	Fn[0] = #10000 1'b0;
	Fn[0] = #30000 1'b1;
	Fn[0] = #30000 1'b0;
	Fn[0] = #20000 1'b1;
	Fn[0] = #10000 1'b0;
	Fn[0] = #10000 1'b1;
	Fn[0] = #20000 1'b0;
	Fn[0] = #10000 1'b1;
	Fn[0] = #10000 1'b0;
	Fn[0] = #10000 1'b1;
	Fn[0] = #20000 1'b0;
	Fn[0] = #20000 1'b1;
	Fn[0] = #10000 1'b0;
	Fn[0] = #10000 1'b1;
	Fn[0] = #20000 1'b0;
	Fn[0] = #10000 1'b1;
	Fn[0] = #10000 1'b0;
	Fn[0] = #20000 1'b1;
	Fn[0] = #10000 1'b0;
	Fn[0] = #20000 1'b1;
	Fn[0] = #30000 1'b0;
	Fn[0] = #30000 1'b1;
	Fn[0] = #10000 1'b0;
	Fn[0] = #30000 1'b1;
	Fn[0] = #10000 1'b0;
	Fn[0] = #10000 1'b1;
	Fn[0] = #40000 1'b0;
	Fn[0] = #20000 1'b1;
	Fn[0] = #10000 1'b0;
	Fn[0] = #40000 1'b1;
	Fn[0] = #20000 1'b0;
	Fn[0] = #10000 1'b1;
	Fn[0] = #10000 1'b0;
	Fn[0] = #10000 1'b1;
	Fn[0] = #20000 1'b0;
	Fn[0] = #10000 1'b1;
	Fn[0] = #10000 1'b0;
	Fn[0] = #10000 1'b1;
	Fn[0] = #20000 1'b0;
	Fn[0] = #10000 1'b1;
	Fn[0] = #10000 1'b0;
	Fn[0] = #10000 1'b1;
	Fn[0] = #20000 1'b0;
	Fn[0] = #30000 1'b1;
	Fn[0] = #30000 1'b0;
	Fn[0] = #80000 1'b1;
	Fn[0] = #10000 1'b0;
	Fn[0] = #10000 1'b1;
	Fn[0] = #10000 1'b0;
end 
// Wn[ 1 ]
initial
begin
	Wn[1] = 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #20000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #30000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #10000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #10000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #10000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #10000 1'b0;
	Wn[1] = #30000 1'b1;
	Wn[1] = #20000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #20000 1'b0;
	Wn[1] = #20000 1'b1;
	Wn[1] = #50000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #20000 1'b0;
	Wn[1] = #20000 1'b1;
	Wn[1] = #10000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #10000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #10000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #10000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #20000 1'b0;
	Wn[1] = #20000 1'b1;
	Wn[1] = #20000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #10000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #30000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #10000 1'b0;
	Wn[1] = #30000 1'b1;
	Wn[1] = #10000 1'b0;
	Wn[1] = #20000 1'b1;
	Wn[1] = #10000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #40000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #20000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #20000 1'b0;
	Wn[1] = #50000 1'b1;
	Wn[1] = #10000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #20000 1'b0;
	Wn[1] = #10000 1'b1;
	Wn[1] = #10000 1'b0;
	Wn[1] = #40000 1'b1;
	Wn[1] = #30000 1'b0;
	Wn[1] = #30000 1'b1;
	Wn[1] = #20000 1'b0;
	Wn[1] = #10000 1'b1;
end 
// Wn[ 0 ]
initial
begin
	Wn[0] = 1'b1;
	Wn[0] = #10000 1'b0;
	Wn[0] = #10000 1'b1;
	Wn[0] = #20000 1'b0;
	Wn[0] = #30000 1'b1;
	Wn[0] = #10000 1'b0;
	Wn[0] = #20000 1'b1;
	Wn[0] = #10000 1'b0;
	Wn[0] = #40000 1'b1;
	Wn[0] = #10000 1'b0;
	Wn[0] = #10000 1'b1;
	Wn[0] = #10000 1'b0;
	Wn[0] = #30000 1'b1;
	Wn[0] = #10000 1'b0;
	Wn[0] = #10000 1'b1;
	Wn[0] = #60000 1'b0;
	Wn[0] = #30000 1'b1;
	Wn[0] = #20000 1'b0;
	Wn[0] = #40000 1'b1;
	Wn[0] = #10000 1'b0;
	Wn[0] = #10000 1'b1;
	Wn[0] = #10000 1'b0;
	Wn[0] = #30000 1'b1;
	Wn[0] = #20000 1'b0;
	Wn[0] = #10000 1'b1;
	Wn[0] = #10000 1'b0;
	Wn[0] = #10000 1'b1;
	Wn[0] = #10000 1'b0;
	Wn[0] = #10000 1'b1;
	Wn[0] = #40000 1'b0;
	Wn[0] = #20000 1'b1;
	Wn[0] = #20000 1'b0;
	Wn[0] = #10000 1'b1;
	Wn[0] = #30000 1'b0;
	Wn[0] = #10000 1'b1;
	Wn[0] = #20000 1'b0;
	Wn[0] = #10000 1'b1;
	Wn[0] = #10000 1'b0;
	Wn[0] = #10000 1'b1;
	Wn[0] = #60000 1'b0;
	Wn[0] = #10000 1'b1;
	Wn[0] = #30000 1'b0;
	Wn[0] = #20000 1'b1;
	Wn[0] = #30000 1'b0;
	Wn[0] = #20000 1'b1;
	Wn[0] = #40000 1'b0;
	Wn[0] = #20000 1'b1;
	Wn[0] = #30000 1'b0;
	Wn[0] = #10000 1'b1;
end 

// WREG
initial
begin
	WREG = 1'b1;
end 

alusys_vlg_sample_tst tb_sample (
	.An(An),
	.BIMM(BIMM),
	.Bn(Bn),
	.CLK(CLK),
	.CLRN(CLRN),
	.Fn(Fn),
	.IMM(IMM),
	.Op(Op),
	.Wn(Wn),
	.WREG(WREG),
	.sampler_tx(sampler)
);

alusys_vlg_check_tst tb_out(
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.sampler_rx(sampler)
);
endmodule

