// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/25/2025 20:20:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ramsub
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ramsub_vlg_sample_tst(
	CLK,
	CLRN,
	sampler_tx
);
input  CLK;
input  CLRN;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CLRN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ramsub_vlg_check_tst (
	MAR,
	MBR,
	PC,
	Q,
	uIR,
	sampler_rx
);
input [7:0] MAR;
input [7:0] MBR;
input [7:0] PC;
input [7:0] Q;
input [7:0] uIR;
input sampler_rx;

reg [7:0] MAR_expected;
reg [7:0] MBR_expected;
reg [7:0] PC_expected;
reg [7:0] Q_expected;
reg [7:0] uIR_expected;

reg [7:0] MAR_prev;
reg [7:0] MBR_prev;
reg [7:0] PC_prev;
reg [7:0] Q_prev;
reg [7:0] uIR_prev;

reg [7:0] MAR_expected_prev;
reg [7:0] MBR_expected_prev;
reg [7:0] PC_expected_prev;
reg [7:0] Q_expected_prev;
reg [7:0] uIR_expected_prev;

reg [7:0] last_MAR_exp;
reg [7:0] last_MBR_exp;
reg [7:0] last_PC_exp;
reg [7:0] last_Q_exp;
reg [7:0] last_uIR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	MAR_prev = MAR;
	MBR_prev = MBR;
	PC_prev = PC;
	Q_prev = Q;
	uIR_prev = uIR;
end

// update expected /o prevs

always @(trigger)
begin
	MAR_expected_prev = MAR_expected;
	MBR_expected_prev = MBR_expected;
	PC_expected_prev = PC_expected;
	Q_expected_prev = Q_expected;
	uIR_expected_prev = uIR_expected;
end


// expected Q[ 7 ]
initial
begin
	Q_expected[7] = 1'bX;
end 
// expected Q[ 6 ]
initial
begin
	Q_expected[6] = 1'bX;
end 
// expected Q[ 5 ]
initial
begin
	Q_expected[5] = 1'bX;
end 
// expected Q[ 4 ]
initial
begin
	Q_expected[4] = 1'bX;
end 
// expected Q[ 3 ]
initial
begin
	Q_expected[3] = 1'bX;
end 
// expected Q[ 2 ]
initial
begin
	Q_expected[2] = 1'bX;
end 
// expected Q[ 1 ]
initial
begin
	Q_expected[1] = 1'bX;
end 
// expected Q[ 0 ]
initial
begin
	Q_expected[0] = 1'bX;
end 
// expected MBR[ 7 ]
initial
begin
	MBR_expected[7] = 1'bX;
end 
// expected MBR[ 6 ]
initial
begin
	MBR_expected[6] = 1'bX;
end 
// expected MBR[ 5 ]
initial
begin
	MBR_expected[5] = 1'bX;
end 
// expected MBR[ 4 ]
initial
begin
	MBR_expected[4] = 1'bX;
end 
// expected MBR[ 3 ]
initial
begin
	MBR_expected[3] = 1'bX;
end 
// expected MBR[ 2 ]
initial
begin
	MBR_expected[2] = 1'bX;
end 
// expected MBR[ 1 ]
initial
begin
	MBR_expected[1] = 1'bX;
end 
// expected MBR[ 0 ]
initial
begin
	MBR_expected[0] = 1'bX;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
end 
// expected MAR[ 7 ]
initial
begin
	MAR_expected[7] = 1'bX;
end 
// expected MAR[ 6 ]
initial
begin
	MAR_expected[6] = 1'bX;
end 
// expected MAR[ 5 ]
initial
begin
	MAR_expected[5] = 1'bX;
end 
// expected MAR[ 4 ]
initial
begin
	MAR_expected[4] = 1'bX;
end 
// expected MAR[ 3 ]
initial
begin
	MAR_expected[3] = 1'bX;
end 
// expected MAR[ 2 ]
initial
begin
	MAR_expected[2] = 1'bX;
end 
// expected MAR[ 1 ]
initial
begin
	MAR_expected[1] = 1'bX;
end 
// expected MAR[ 0 ]
initial
begin
	MAR_expected[0] = 1'bX;
end 
// expected uIR[ 7 ]
initial
begin
	uIR_expected[7] = 1'bX;
end 
// expected uIR[ 6 ]
initial
begin
	uIR_expected[6] = 1'bX;
end 
// expected uIR[ 5 ]
initial
begin
	uIR_expected[5] = 1'bX;
end 
// expected uIR[ 4 ]
initial
begin
	uIR_expected[4] = 1'bX;
end 
// expected uIR[ 3 ]
initial
begin
	uIR_expected[3] = 1'bX;
end 
// expected uIR[ 2 ]
initial
begin
	uIR_expected[2] = 1'bX;
end 
// expected uIR[ 1 ]
initial
begin
	uIR_expected[1] = 1'bX;
end 
// expected uIR[ 0 ]
initial
begin
	uIR_expected[0] = 1'bX;
end 
// generate trigger
always @(MAR_expected or MAR or MBR_expected or MBR or PC_expected or PC or Q_expected or Q or uIR_expected or uIR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected MAR = %b | expected MBR = %b | expected PC = %b | expected Q = %b | expected uIR = %b | ",MAR_expected_prev,MBR_expected_prev,PC_expected_prev,Q_expected_prev,uIR_expected_prev);
	$display("| real MAR = %b | real MBR = %b | real PC = %b | real Q = %b | real uIR = %b | ",MAR_prev,MBR_prev,PC_prev,Q_prev,uIR_prev);
`endif
	if (
		( MAR_expected_prev[0] !== 1'bx ) && ( MAR_prev[0] !== MAR_expected_prev[0] )
		&& ((MAR_expected_prev[0] !== last_MAR_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MAR_exp[0] = MAR_expected_prev[0];
	end
	if (
		( MAR_expected_prev[1] !== 1'bx ) && ( MAR_prev[1] !== MAR_expected_prev[1] )
		&& ((MAR_expected_prev[1] !== last_MAR_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MAR_exp[1] = MAR_expected_prev[1];
	end
	if (
		( MAR_expected_prev[2] !== 1'bx ) && ( MAR_prev[2] !== MAR_expected_prev[2] )
		&& ((MAR_expected_prev[2] !== last_MAR_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MAR_exp[2] = MAR_expected_prev[2];
	end
	if (
		( MAR_expected_prev[3] !== 1'bx ) && ( MAR_prev[3] !== MAR_expected_prev[3] )
		&& ((MAR_expected_prev[3] !== last_MAR_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MAR_exp[3] = MAR_expected_prev[3];
	end
	if (
		( MAR_expected_prev[4] !== 1'bx ) && ( MAR_prev[4] !== MAR_expected_prev[4] )
		&& ((MAR_expected_prev[4] !== last_MAR_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MAR_exp[4] = MAR_expected_prev[4];
	end
	if (
		( MAR_expected_prev[5] !== 1'bx ) && ( MAR_prev[5] !== MAR_expected_prev[5] )
		&& ((MAR_expected_prev[5] !== last_MAR_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MAR_exp[5] = MAR_expected_prev[5];
	end
	if (
		( MAR_expected_prev[6] !== 1'bx ) && ( MAR_prev[6] !== MAR_expected_prev[6] )
		&& ((MAR_expected_prev[6] !== last_MAR_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MAR_exp[6] = MAR_expected_prev[6];
	end
	if (
		( MAR_expected_prev[7] !== 1'bx ) && ( MAR_prev[7] !== MAR_expected_prev[7] )
		&& ((MAR_expected_prev[7] !== last_MAR_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MAR_exp[7] = MAR_expected_prev[7];
	end
	if (
		( MBR_expected_prev[0] !== 1'bx ) && ( MBR_prev[0] !== MBR_expected_prev[0] )
		&& ((MBR_expected_prev[0] !== last_MBR_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_expected_prev);
		$display ("     Real value = %b", MBR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MBR_exp[0] = MBR_expected_prev[0];
	end
	if (
		( MBR_expected_prev[1] !== 1'bx ) && ( MBR_prev[1] !== MBR_expected_prev[1] )
		&& ((MBR_expected_prev[1] !== last_MBR_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_expected_prev);
		$display ("     Real value = %b", MBR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MBR_exp[1] = MBR_expected_prev[1];
	end
	if (
		( MBR_expected_prev[2] !== 1'bx ) && ( MBR_prev[2] !== MBR_expected_prev[2] )
		&& ((MBR_expected_prev[2] !== last_MBR_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_expected_prev);
		$display ("     Real value = %b", MBR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MBR_exp[2] = MBR_expected_prev[2];
	end
	if (
		( MBR_expected_prev[3] !== 1'bx ) && ( MBR_prev[3] !== MBR_expected_prev[3] )
		&& ((MBR_expected_prev[3] !== last_MBR_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_expected_prev);
		$display ("     Real value = %b", MBR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MBR_exp[3] = MBR_expected_prev[3];
	end
	if (
		( MBR_expected_prev[4] !== 1'bx ) && ( MBR_prev[4] !== MBR_expected_prev[4] )
		&& ((MBR_expected_prev[4] !== last_MBR_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_expected_prev);
		$display ("     Real value = %b", MBR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MBR_exp[4] = MBR_expected_prev[4];
	end
	if (
		( MBR_expected_prev[5] !== 1'bx ) && ( MBR_prev[5] !== MBR_expected_prev[5] )
		&& ((MBR_expected_prev[5] !== last_MBR_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_expected_prev);
		$display ("     Real value = %b", MBR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MBR_exp[5] = MBR_expected_prev[5];
	end
	if (
		( MBR_expected_prev[6] !== 1'bx ) && ( MBR_prev[6] !== MBR_expected_prev[6] )
		&& ((MBR_expected_prev[6] !== last_MBR_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_expected_prev);
		$display ("     Real value = %b", MBR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MBR_exp[6] = MBR_expected_prev[6];
	end
	if (
		( MBR_expected_prev[7] !== 1'bx ) && ( MBR_prev[7] !== MBR_expected_prev[7] )
		&& ((MBR_expected_prev[7] !== last_MBR_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_expected_prev);
		$display ("     Real value = %b", MBR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MBR_exp[7] = MBR_expected_prev[7];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( Q_expected_prev[0] !== 1'bx ) && ( Q_prev[0] !== Q_expected_prev[0] )
		&& ((Q_expected_prev[0] !== last_Q_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_exp[0] = Q_expected_prev[0];
	end
	if (
		( Q_expected_prev[1] !== 1'bx ) && ( Q_prev[1] !== Q_expected_prev[1] )
		&& ((Q_expected_prev[1] !== last_Q_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_exp[1] = Q_expected_prev[1];
	end
	if (
		( Q_expected_prev[2] !== 1'bx ) && ( Q_prev[2] !== Q_expected_prev[2] )
		&& ((Q_expected_prev[2] !== last_Q_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_exp[2] = Q_expected_prev[2];
	end
	if (
		( Q_expected_prev[3] !== 1'bx ) && ( Q_prev[3] !== Q_expected_prev[3] )
		&& ((Q_expected_prev[3] !== last_Q_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_exp[3] = Q_expected_prev[3];
	end
	if (
		( Q_expected_prev[4] !== 1'bx ) && ( Q_prev[4] !== Q_expected_prev[4] )
		&& ((Q_expected_prev[4] !== last_Q_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_exp[4] = Q_expected_prev[4];
	end
	if (
		( Q_expected_prev[5] !== 1'bx ) && ( Q_prev[5] !== Q_expected_prev[5] )
		&& ((Q_expected_prev[5] !== last_Q_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_exp[5] = Q_expected_prev[5];
	end
	if (
		( Q_expected_prev[6] !== 1'bx ) && ( Q_prev[6] !== Q_expected_prev[6] )
		&& ((Q_expected_prev[6] !== last_Q_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_exp[6] = Q_expected_prev[6];
	end
	if (
		( Q_expected_prev[7] !== 1'bx ) && ( Q_prev[7] !== Q_expected_prev[7] )
		&& ((Q_expected_prev[7] !== last_Q_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_exp[7] = Q_expected_prev[7];
	end
	if (
		( uIR_expected_prev[0] !== 1'bx ) && ( uIR_prev[0] !== uIR_expected_prev[0] )
		&& ((uIR_expected_prev[0] !== last_uIR_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIR_expected_prev);
		$display ("     Real value = %b", uIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_uIR_exp[0] = uIR_expected_prev[0];
	end
	if (
		( uIR_expected_prev[1] !== 1'bx ) && ( uIR_prev[1] !== uIR_expected_prev[1] )
		&& ((uIR_expected_prev[1] !== last_uIR_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIR_expected_prev);
		$display ("     Real value = %b", uIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_uIR_exp[1] = uIR_expected_prev[1];
	end
	if (
		( uIR_expected_prev[2] !== 1'bx ) && ( uIR_prev[2] !== uIR_expected_prev[2] )
		&& ((uIR_expected_prev[2] !== last_uIR_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIR_expected_prev);
		$display ("     Real value = %b", uIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_uIR_exp[2] = uIR_expected_prev[2];
	end
	if (
		( uIR_expected_prev[3] !== 1'bx ) && ( uIR_prev[3] !== uIR_expected_prev[3] )
		&& ((uIR_expected_prev[3] !== last_uIR_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIR_expected_prev);
		$display ("     Real value = %b", uIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_uIR_exp[3] = uIR_expected_prev[3];
	end
	if (
		( uIR_expected_prev[4] !== 1'bx ) && ( uIR_prev[4] !== uIR_expected_prev[4] )
		&& ((uIR_expected_prev[4] !== last_uIR_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIR_expected_prev);
		$display ("     Real value = %b", uIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_uIR_exp[4] = uIR_expected_prev[4];
	end
	if (
		( uIR_expected_prev[5] !== 1'bx ) && ( uIR_prev[5] !== uIR_expected_prev[5] )
		&& ((uIR_expected_prev[5] !== last_uIR_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIR_expected_prev);
		$display ("     Real value = %b", uIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_uIR_exp[5] = uIR_expected_prev[5];
	end
	if (
		( uIR_expected_prev[6] !== 1'bx ) && ( uIR_prev[6] !== uIR_expected_prev[6] )
		&& ((uIR_expected_prev[6] !== last_uIR_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIR_expected_prev);
		$display ("     Real value = %b", uIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_uIR_exp[6] = uIR_expected_prev[6];
	end
	if (
		( uIR_expected_prev[7] !== 1'bx ) && ( uIR_prev[7] !== uIR_expected_prev[7] )
		&& ((uIR_expected_prev[7] !== last_uIR_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIR_expected_prev);
		$display ("     Real value = %b", uIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_uIR_exp[7] = uIR_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ramsub_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLRN;
// wires                                               
wire [7:0] MAR;
wire [7:0] MBR;
wire [7:0] PC;
wire [7:0] Q;
wire [7:0] uIR;

wire sampler;                             

// assign statements (if any)                          
ramsub i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLRN(CLRN),
	.MAR(MAR),
	.MBR(MBR),
	.PC(PC),
	.Q(Q),
	.uIR(uIR)
);

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #15000 1'b1;
	# 5000;
	repeat(97)
	begin
		CLK = 1'b0;
		CLK = #5000 1'b1;
		# 5000;
	end
	CLK = 1'b0;
	CLK = #5000 1'b1;
end 

// CLRN
initial
begin
	CLRN = 1'b0;
	CLRN = #5000 1'b1;
	CLRN = #225000 1'b0;
	# 5000;
	repeat(76)
	begin
		CLRN = 1'b1;
		CLRN = #5000 1'b0;
		# 5000;
	end
	CLRN = 1'b1;
end 

ramsub_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CLRN(CLRN),
	.sampler_tx(sampler)
);

ramsub_vlg_check_tst tb_out(
	.MAR(MAR),
	.MBR(MBR),
	.PC(PC),
	.Q(Q),
	.uIR(uIR),
	.sampler_rx(sampler)
);
endmodule

