// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/13/2025 18:50:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cnt8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cnt8_vlg_sample_tst(
	CLK,
	CLRN,
	CNT,
	D,
	LD,
	sampler_tx
);
input  CLK;
input  CLRN;
input  CNT;
input [7:0] D;
input  LD;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CLRN or CNT or D or LD)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cnt8_vlg_check_tst (
	OVF,
	Q,
	sampler_rx
);
input  OVF;
input [7:0] Q;
input sampler_rx;

reg  OVF_expected;
reg [7:0] Q_expected;

reg  OVF_prev;
reg [7:0] Q_prev;

reg  OVF_expected_prev;
reg [7:0] Q_expected_prev;

reg  last_OVF_exp;
reg [7:0] last_Q_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	OVF_prev = OVF;
	Q_prev = Q;
end

// update expected /o prevs

always @(trigger)
begin
	OVF_expected_prev = OVF_expected;
	Q_expected_prev = Q_expected;
end



// expected OVF
initial
begin
	OVF_expected = 1'bX;
end 
// expected Q[ 7 ]
initial
begin
	Q_expected[7] = 1'bX;
end 
// expected Q[ 6 ]
initial
begin
	Q_expected[6] = 1'bX;
end 
// expected Q[ 5 ]
initial
begin
	Q_expected[5] = 1'bX;
end 
// expected Q[ 4 ]
initial
begin
	Q_expected[4] = 1'bX;
end 
// expected Q[ 3 ]
initial
begin
	Q_expected[3] = 1'bX;
end 
// expected Q[ 2 ]
initial
begin
	Q_expected[2] = 1'bX;
end 
// expected Q[ 1 ]
initial
begin
	Q_expected[1] = 1'bX;
end 
// expected Q[ 0 ]
initial
begin
	Q_expected[0] = 1'bX;
end 
// generate trigger
always @(OVF_expected or OVF or Q_expected or Q)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OVF = %b | expected Q = %b | ",OVF_expected_prev,Q_expected_prev);
	$display("| real OVF = %b | real Q = %b | ",OVF_prev,Q_prev);
`endif
	if (
		( OVF_expected_prev !== 1'bx ) && ( OVF_prev !== OVF_expected_prev )
		&& ((OVF_expected_prev !== last_OVF_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OVF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OVF_expected_prev);
		$display ("     Real value = %b", OVF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OVF_exp = OVF_expected_prev;
	end
	if (
		( Q_expected_prev[0] !== 1'bx ) && ( Q_prev[0] !== Q_expected_prev[0] )
		&& ((Q_expected_prev[0] !== last_Q_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q_exp[0] = Q_expected_prev[0];
	end
	if (
		( Q_expected_prev[1] !== 1'bx ) && ( Q_prev[1] !== Q_expected_prev[1] )
		&& ((Q_expected_prev[1] !== last_Q_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q_exp[1] = Q_expected_prev[1];
	end
	if (
		( Q_expected_prev[2] !== 1'bx ) && ( Q_prev[2] !== Q_expected_prev[2] )
		&& ((Q_expected_prev[2] !== last_Q_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q_exp[2] = Q_expected_prev[2];
	end
	if (
		( Q_expected_prev[3] !== 1'bx ) && ( Q_prev[3] !== Q_expected_prev[3] )
		&& ((Q_expected_prev[3] !== last_Q_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q_exp[3] = Q_expected_prev[3];
	end
	if (
		( Q_expected_prev[4] !== 1'bx ) && ( Q_prev[4] !== Q_expected_prev[4] )
		&& ((Q_expected_prev[4] !== last_Q_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q_exp[4] = Q_expected_prev[4];
	end
	if (
		( Q_expected_prev[5] !== 1'bx ) && ( Q_prev[5] !== Q_expected_prev[5] )
		&& ((Q_expected_prev[5] !== last_Q_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q_exp[5] = Q_expected_prev[5];
	end
	if (
		( Q_expected_prev[6] !== 1'bx ) && ( Q_prev[6] !== Q_expected_prev[6] )
		&& ((Q_expected_prev[6] !== last_Q_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q_exp[6] = Q_expected_prev[6];
	end
	if (
		( Q_expected_prev[7] !== 1'bx ) && ( Q_prev[7] !== Q_expected_prev[7] )
		&& ((Q_expected_prev[7] !== last_Q_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q_exp[7] = Q_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cnt8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLRN;
reg CNT;
reg [7:0] D;
reg LD;
// wires                                               
wire OVF;
wire [7:0] Q;

wire sampler;                             

// assign statements (if any)                          
cnt8 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLRN(CLRN),
	.CNT(CNT),
	.D(D),
	.LD(LD),
	.OVF(OVF),
	.Q(Q)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// CLRN
initial
begin
	CLRN = 1'b1;
end 

// CNT
initial
begin
	CNT = 1'b1;
end 
// D[ 7 ]
initial
begin
	D[7] = 1'b0;
	D[7] = #40000 1'b1;
	D[7] = #10000 1'b0;
end 
// D[ 6 ]
initial
begin
	D[6] = 1'b1;
	D[6] = #10000 1'b0;
	D[6] = #30000 1'b1;
	D[6] = #10000 1'b0;
end 
// D[ 5 ]
initial
begin
	D[5] = 1'b0;
	D[5] = #40000 1'b1;
	D[5] = #10000 1'b0;
end 
// D[ 4 ]
initial
begin
	D[4] = 1'b0;
	D[4] = #40000 1'b1;
	D[4] = #10000 1'b0;
end 
// D[ 3 ]
initial
begin
	D[3] = 1'b0;
end 
// D[ 2 ]
initial
begin
	D[2] = 1'b0;
end 
// D[ 1 ]
initial
begin
	D[1] = 1'b0;
end 
// D[ 0 ]
initial
begin
	D[0] = 1'b0;
end 

// LD
initial
begin
	LD = 1'b1;
	LD = #10000 1'b0;
	LD = #30000 1'b1;
	LD = #10000 1'b0;
end 

cnt8_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CLRN(CLRN),
	.CNT(CNT),
	.D(D),
	.LD(LD),
	.sampler_tx(sampler)
);

cnt8_vlg_check_tst tb_out(
	.OVF(OVF),
	.Q(Q),
	.sampler_rx(sampler)
);
endmodule

